plugins {
  id 'java-library'
  id 'maven-publish'
  id "io.freefair.lombok" version "5.3.0"
  id 'nebula.facet' version "9.6.3"
  id 'dependency-constraints'
  id 'gemfire-repo-artifact-publishing'
  id 'spring-java-jar'
}

project.ext.set("pomProjectLongName","Spring Session VMware GemFire")
project.ext.set("pomProjectArtifactName","spring-session-2.7-gemfire-${gemfireBaseVersion}")
project.ext.set("pomProjectDescription","Spring Session For VMware GemFire")

facets {
  integrationTest {
    includeInCheckLifecycle = false
  }
}

dependencies {
  api ('org.springframework.session:spring-session-data-geode'){
    exclude group:'org.springframework.data',module:'spring-data-geode'
  }
  api 'org.springframework:spring-context-support'
  api 'org.springframework:spring-jcl'

  api "com.vmware.gemfire:spring-data-2.7-gemfire-${gemfireBaseVersion}:${springDataGemFireVersion}"
  api 'org.springframework.session:spring-session-core:2.7.0'


  api 'com.google.code.findbugs:jsr305'
  api 'org.springframework.security:spring-security-core'
  api 'org.springframework.security:spring-security-web'

  runtimeOnly "jakarta.servlet:jakarta.servlet-api"

  testImplementation 'edu.umd.cs.mtc:multithreadedtc'
  testImplementation('org.springframework.data:spring-data-geode-test')
  {
    exclude group:'org.springframework.data',module:'spring-data-geode'
  }

  testImplementation 'org.assertj:assertj-core'
  testImplementation 'junit:junit'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'org.springframework:spring-test'
  testImplementation 'org.springframework:spring-web'
  testImplementation 'ch.qos.logback:logback-classic'
  testImplementation 'org.slf4j:log4j-over-slf4j'
  compileOnly 'jakarta.servlet:jakarta.servlet-api'
  testCompileOnly 'jakarta.servlet:jakarta.servlet-api'

  integrationTestImplementation 'junit:junit'
  integrationTestImplementation 'org.assertj:assertj-core'
  integrationTestImplementation 'ch.qos.logback:logback-classic'
  integrationTestImplementation 'org.slf4j:log4j-over-slf4j'
  integrationTestImplementation 'com.google.code.findbugs:jsr305'
  integrationTestImplementation 'org.springframework.shell:spring-shell'
  integrationTestImplementation 'org.springframework:spring-test'
  integrationTestImplementation('org.springframework.data:spring-data-geode-test')
      {
        exclude group:'org.springframework.data',module:'spring-data-geode'
      }
}

sourceSets {
  test {
    java {
      srcDir file('src/test/java')
      srcDir file('src/ssdg-test-read-only/java')
    }
    resources {
      srcDir file('src/test/resources')
      srcDir file('src/ssdg-test-read-only/resources')
    }
  }
  integrationTest {
    java {
      srcDir file('src/integrationTest/java')
      srcDir file('src/ssdg-integration-test-read-only/java')
    }
    resources {
      srcDir file('src/integrationTest/resources')
      srcDir file('src/ssdg-integration-test-read-only/resources')
    }
  }
}

description = 'Spring Session for VMware GemFire'


task copySpringTestClasses(type: Exec) {
  workingDir "${rootProject.rootDir}/scripts"
  commandLine 'chmod', '+x', 'copySSDGTestResources.sh'
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    commandLine 'cmd', '/c', 'mycommand'
  } else {
    commandLine './copySSDGTestResources.sh', '-l', "${rootProject.rootDir}/tmp/spring-session-data-geode", '-b',
        "${springSessionDataGeodeVersion}", '-t', "${rootProject.rootDir}"
  }
}

task cleanSpringTestResources(type: Exec) {
  commandLine 'rm', '-rf', "${project.projectDir}/src/ssdg-test-read-only", "${project.projectDir}/src/ssdg-integration-test-read-only"
}

clean {
  dependsOn("cleanSpringTestResources")
}

integrationTest{
  dependsOn("copySpringTestClasses")
  forkEvery = 1
  maxParallelForks = 1

  filter {
    includeTestsMatching "*.*Tests"
    includeTestsMatching "*.*Test"
    excludeTestsMatching("org.springframework.session.data.gemfire.serialization.pdx.SessionSerializationWithPdxRequiresNoServerConfigurationIntegrationTests")
  }
}

test {
  dependsOn("copySpringTestClasses")
  forkEvery = 1
  maxParallelForks = 1

  filter {
    includeTestsMatching "*.*Tests"
    includeTestsMatching "*.*Test"
  }
}

build {
  dependsOn("copySpringTestClasses")
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}
