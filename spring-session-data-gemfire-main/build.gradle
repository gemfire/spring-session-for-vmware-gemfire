plugins {
  id 'java-library'
  id 'maven-publish'
  id "io.freefair.lombok" version "5.3.0"
  id 'nebula.facet' version "9.6.3"
}

facets {
  integrationTest {
    includeInCheckLifecycle = false
  }
}

dependencies {
  api ('org.springframework.session:spring-session-data-geode:2.6.1'){
    exclude group:'org.springframework.data',module:'spring-data-geode'
  }
  api 'org.springframework:spring-context-support:5.3.20'
  api 'org.springframework:spring-jcl:5.3.20'

  api 'com.vmware.gemfire:spring-data-gemfire:9.15.0-build.9999-SD26'
  api 'org.springframework.session:spring-session-core:2.6.3'


  api 'com.google.code.findbugs:jsr305:3.0.2'
  api 'org.springframework.security:spring-security-core:5.6.3'
  api 'org.springframework.security:spring-security-web:5.6.3'
  testImplementation 'edu.umd.cs.mtc:multithreadedtc:1.01'
  testImplementation('org.springframework.data:spring-data-geode-test:0.2.2-Q')
  {
    exclude group:'org.springframework.data',module:'spring-data-geode'
  }
  api("org.slf4j:slf4j-api")
  api("org.slf4j:jcl-over-slf4j")
//  api("org.slf4:log4j-over-slf4j")
  api("ch.qos.logback:logback-core:1.2.5")
  api("ch.qos.logback:logback-classic:1.2.5")

  testImplementation 'org.assertj:assertj-core:3.22.0'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.mockito:mockito-core:4.4.0'
  testImplementation 'org.springframework:spring-test:5.3.19'
  testImplementation 'org.springframework:spring-web:5.3.19'
  testImplementation 'ch.qos.logback:logback-classic:1.2.5'
  testImplementation 'org.slf4j:log4j-over-slf4j:1.7.36'
  compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
  testCompileOnly 'javax.servlet:javax.servlet-api:3.1.0'

  integrationTestImplementation 'ch.qos.logback:logback-classic:1.2.5'
  integrationTestImplementation 'org.apache.logging.log4j:log4j-to-slf4j:2.14.0'
  integrationTestImplementation "com.google.code.findbugs:jsr305:3.0.2"
  integrationTestImplementation "org.springframework.shell:spring-shell:1.2.0.RELEASE"
}

sourceSets {
  test {
    java {
      srcDir file('src/test/java')
      srcDir file('src/ssdg-test-read-only/java')
    }
    resources {
      srcDir file('src/test/resources')
      srcDir file('src/ssdg-test-read-only/resources')
    }
  }
  integrationTest {
    java {
      srcDir file('src/integrationTest/java')
      srcDir file('src/ssdg-integration-test-read-only/java')
    }
    resources {
      srcDir file('src/integrationTest/resources')
      srcDir file('src/ssdg-integration-test-read-only/resources')
    }
  }
}

description = 'Spring Session Data for Tanzu GemFire'

publishing {
  publications {
    maven(MavenPublication) {
      groupId = project.group
      artifactId = 'spring-session-data-gemfire'
      version = project.version

      from components.java
    }
  }
}

task copySpringTestClasses(type: Exec) {
  dependsOn(":spring-session-data-gemfire-parent:cleanSpringTestClasses")
  workingDir "${rootProject.rootDir}/scripts"
  commandLine 'chmod', '+x', 'copySSDGTestResources.sh'
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    commandLine 'cmd', '/c', 'mycommand'
  } else {
    commandLine './copySSDGTestResources.sh', '-l', "${rootProject.rootDir}/tmp/spring-session-data-geode", '-b',
        "${springSessionDataGeodeVersion}", '-t', "${rootProject.rootDir}"
  }
}

task cleanSpringTestResources(type: Exec) {
  commandLine 'rm', '-rf', "${project.projectDir}/src/ssdg-test-read-only", "${project.projectDir}/src/ssdg-integration-test-read-only"
}

clean {
  dependsOn(":spring-session-data-gemfire-parent:cleanSpringTestClasses")
  dependsOn("cleanSpringTestResources")
}

integrationTest{
  dependsOn("copySpringTestClasses")
  forkEvery = 1
  maxParallelForks = 1

  filter {
    includeTestsMatching "*.*Tests"
    includeTestsMatching "*.*Test"
    excludeTestsMatching("org.springframework.session.data.gemfire.serialization.pdx.SessionSerializationWithPdxRequiresNoServerConfigurationIntegrationTests")
  }
}

test {
  dependsOn("copySpringTestClasses")
  forkEvery = 1
  maxParallelForks = 1

  filter {
    includeTestsMatching "*.*Tests"
    includeTestsMatching "*.*Test"
  }
}

build {
  dependsOn("copySpringTestClasses")
}